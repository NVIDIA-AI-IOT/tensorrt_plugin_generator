# SPDX-FileCopyrightText: Copyright (c) <year> NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: MIT
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

Test1:
    plugin_type: IPluginV2DynamicExt
    inputs:
        input0:
            shape: 1x16x16
        input1:
            shape: 1x16x32x32
    outputs:
        output:
            shape: 2x64
    attributes:
        a:
            datatype: float32
            default_value: 3.4028235e+38
        b:
            datatype: float32[2]
            default_value: [3.4028235e+38, 3.4028235e+38]
        c:
          datatype: float32[3]
          default_value: [65504.0, 65504.0, 65504.0]
        d:
          datatype: int32[4]
          default_value: [2147483647, 2147483647, 2147483647, 2147483647]
        e:
          datatype: int32[5]
          default_value: [32767, 32767, 32767, 32767, 32767]
        f:
          datatype: int32[6]
          default_value: [127, 127, 127, 127, 127, 127]
        g:
            datatype: char[7]
            default_value: ['a', 'b', 'c', 'd', 'e', 'f', 'g']
    support_format_combination: ["float32+float32+float32"]

Test2:
    plugin_type: IPluginV2IOExt
    inputs:
        input0:
            shape: -1x16x16
        input1:
            shape: -1x16x32x32
    outputs:
        output:
            shape: -1x64
    attributes:
        a:
            datatype: float32
            default_value: 3.4028235e+38
        b:
            datatype: float32[2]
            default_value: [3.4028235e+38, 3.4028235e+38]
        c:
          datatype: float32[3]
          default_value: [65504.0, 65504.0, 65504.0]
        d:
          datatype: int32[4]
          default_value: [2147483647, 2147483647, 2147483647, 2147483647]
        e:
          datatype: int32[5]
          default_value: [32767, 32767, 32767, 32767, 32767]
        f:
          datatype: int32[6]
          default_value: [127, 127, 127, 127, 127, 127]
        g:
            datatype: char[7]
            default_value: ['a', 'b', 'c', 'd', 'e', 'f', 'g']
    support_format_combination: ["float32+float32+float32"]

Test3:
    plugin_type: IPluginV2DynamicExt
    inputs:
        input.3:
            shape: 1x16x32x32
        conv.weight:
            shape: 16x32x3x3
        conv.bias:
            shape: 16
    outputs:
        output:
            shape: 1x32x32x32
    support_format_combination: ["float32+float32+float32+float32", "float16+float32+float32+float16", "int8+float32+float32+int8"]
    attributes:
        dilations:
            datatype: int32[2]
            default_value: [1,1]
        group:
            datatype: int32
            default_value: 1
        kernel_shape:
            datatype: int32[2]
            default_value: [3,3]
        pads:
            datatype: int32[2]
            default_value: [1,1]
        strides:
            datatype: int32[2]
            default_value: [1,1]